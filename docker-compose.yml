services:
  postgres:
    image: postgres:16-alpine
    container_name: pg16
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app_password_here
      POSTGRES_DB: appdb
      # Optional but nice: make initdb default to scram auth
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --data-checksums"
    command:
      # Point Postgres to our custom configs
      - "-c"
      - "config_file=/etc/postgresql/postgresql.conf"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d appdb -h localhost"]
      interval: 10s
      timeout: 5s
      retries: 10
    volumes:
      - ./services/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./services/postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
      - ./services/postgres/init:/docker-entrypoint-initdb.d:ro
      - pg_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - kafka-postgres-network

  kafka:
    image: apache/kafka-native:3.8.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9091
      KAFKA_LISTENERS: CONTROLLER://kafka:9091,PLAINTEXT://kafka:9093,HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9093,HOST://localhost:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      # Auto-create topics with 4 partitions for consumer parallelism
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_NUM_PARTITIONS: 4
    volumes:
      - kafka_data:/opt/kafka/data
    restart: unless-stopped
    networks:
      - kafka-postgres-network


  kafka-connect:
    image: quay.io/debezium/connect:3.0
    container_name: kafka-connect
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:9093
      GROUP_ID: connect-cluster
      CONFIG_STORAGE_TOPIC: connect-configs
      OFFSET_STORAGE_TOPIC: connect-offsets
      STATUS_STORAGE_TOPIC: connect-status
      CONFIG_STORAGE_REPLICATION_FACTOR: 1
      OFFSET_STORAGE_REPLICATION_FACTOR: 1
      STATUS_STORAGE_REPLICATION_FACTOR: 1
      # JSON converters for now - will add Avro support later
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      KEY_CONVERTER_SCHEMAS_ENABLE: false
      VALUE_CONVERTER_SCHEMAS_ENABLE: false
      # Internal converter for Connect framework
      INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      INTERNAL_KEY_CONVERTER_SCHEMAS_ENABLE: false
      INTERNAL_VALUE_CONVERTER_SCHEMAS_ENABLE: false
      # Plugin path
      CONNECT_PLUGIN_PATH: /kafka/connect
    depends_on:
      - kafka
      - postgres
    restart: unless-stopped
    networks:
      - kafka-postgres-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      DYNAMIC_CONFIG_ENABLED: "true"
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9093
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: connect
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://kafka-connect:8083
      KAFKA_CLUSTERS_0_AUDIT_TOPICAUDITENABLED: true
      KAFKA_CLUSTERS_0_AUDIT_CONSUMERAUDITENABLED: true
    depends_on:
      - kafka
    restart: unless-stopped
    networks:
      - kafka-postgres-network

volumes:
  pg_data:
  kafka_data:

networks:
  kafka-postgres-network:
    driver: bridge
